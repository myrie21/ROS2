 == Server ==

#include <memory>

#include <rclcpp/rclcpp.hpp>
#include <example_interfaces/srv/add_two_ints.hpp>
// #include "rclcpp/rclcpp.hpp"
// #include "example_interfaces/srv/add_two_ints.hpp"


void add(const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request> request, 
          std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> response)
{
  response->sum = request->a + request->b;

  RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "sending back reponse");
}


// void add(const std::shared_ptr<example_interfaces::srv::AddTwoInts::Request> request,
//                std::shared_ptr<example_interfaces::srv::AddTwoInts::Response> response)
// {
//   response->sum = request->a + request->b;

//   RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "Incoming request\na: %ld" " b: %ld", request->a, request->b);
//   RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "sending back response: [%ld]", (long int)response->sum);
// }



int main(int argc, char ** argv)
{
  rclcpp::init(argc, argv);

  std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared("service_node");

  rclcpp::Service<example_interfaces::srv::AddTwoInts>::SharedPtr service =
  node->create_service<example_interfaces::srv::AddTwoInts>("add_two_ints", &add);

  RCLCPP_INFO(node->get_logger(), "Ready to add two ints.");

  rclcpp::spin(node);
 
  rclcpp::shutdown();
  return 0;
}

 == Client ==

#include <memory>
#include <chrono>
#include <rclcpp/rclcpp.hpp>
#include <example_interfaces/srv/add_two_ints.hpp>

using namespace std::chrono_literals;

int main(int argc, char **argv)
{
    rclcpp::init(argc, argv);

    std::shared_ptr<rclcpp::Node> node = rclcpp::Node::make_shared("client_node");

    std::shared_ptr<rclcpp::Client<example_interfaces::srv::AddTwoInts> > client
      = node->create_client<example_interfaces::srv::AddTwoInts>("add_two_ints");

    std::shared_ptr<example_interfaces::srv::AddTwoInts::Request> request
        = std::make_shared<example_interfaces::srv::AddTwoInts::Request>();
    
    request->a = 1;
    request->b = 2;

    while (!client->wait_for_service(1s)){
        RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "server is not available. waiting.");
    }

    auto result = client->async_send_request(request);
    if(rclcpp::spin_until_future_complete(node, result)
                ==rclcpp::executor::FutureReturnCode::SUCCESS){
        RCLCPP_INFO(rclcpp::get_logger("rclcpp"), "result : %ld", result.get()->sum);
    }else{
        RCLCPP_ERROR(rclcpp::get_logger("rclcpp"), "fail to call service");

    }

    rclcpp::shutdown();
    return 0;

}


 == CmakeList.txt ==

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(example_interfaces REQUIRED)

add_executable(service_node src/service_node.cpp)
target_include_directories(service_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
ament_target_dependencies(
  service_node
  "rclcpp"
  "example_interfaces"
)

add_executable(client_node src/client_node.cpp)
target_include_directories(client_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
ament_target_dependencies(
  client_node
  "rclcpp"
  "example_interfaces"
)

