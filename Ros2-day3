#include <memory>

#include <rclcpp/rclcpp.hpp>
#include <geometry_msgs/msg/twist.hpp>

class TeleopTurtle : public rclcpp::Node {
public:
    TeleopTurtle();  //디폴트 생성자

    void forward();
    void backward();
    void rotateLeft();
    void rotateRight();

private:

    rclcpp::Publisher<geometry_msgs::msg::Twist>::SharedPtr publisher_;

    rclcpp::TimerBase::SharedPtr timer_;

    geometry_msgs::msg::Twist msg_;

    void initMsg();

    void timer_callback();
};


#include <functional>
#include <chrono>
#include "TeleopTurtle.h"

using namespace std::chrono_literals;

void TeleopTurtle::initMsg()
{
    this->msg_.linear.x = 0.0;
    this->msg_.linear.y = 0.0;
    this->msg_.linear.z = 0.0;

    this->msg_.angular.x = 0.0;
    this->msg_.angular.y = 0.0;
    this->msg_.angular.z = 0.0;
}
void TeleopTurtle::forward()
{
    this->initMsg();
    this->msg_.linear.x =2.0;
    
    RCLCPP_INFO(this->get_logger(), "forward");
    this->publisher_->publish(this->msg_);
}

void TeleopTurtle::backward()
{
    this->initMsg();
    this->msg_.linear.x =-2.0;

    RCLCPP_INFO(this->get_logger(), "backward");
    this->publisher_->publish(this->msg_);
}

void TeleopTurtle::rotateLeft()
{
    this->initMsg();
    this->msg_.angular.z =2.0;


    RCLCPP_INFO(this->get_logger(), "left rotate");
    this->publisher_->publish(this->msg_);
}

void TeleopTurtle::rotateRight()
{
    this->initMsg();
    this->msg_.angular.z =-2.0;

    RCLCPP_INFO(this->get_logger(), "right rotate");
    this->publisher_->publish(this->msg_);
}

TeleopTurtle::TeleopTurtle()
:Node("teleop_pub")
{
    this->publisher_ = this->Node::create_publisher<geometry_msgs::msg::Twist>("/turtle1/cmd_vel",10);
    this->timer_ = this->create_wall_timer(200ms,std::bind(&TeleopTurtle::timer_callback, this));

    this->timer_->cancel();
}


void TeleopTurtle::timer_callback()
{
    geometry_msgs::msg::Twist msg;
    msg.linear.x = 2.0;
    msg.linear.y = 0.0;
    msg.linear.z = 0.0;

    msg.angular.x = 0.0;
    msg.angular.y = 0.0;
    msg.angular.z = 1.8;

    RCLCPP_INFO(this->get_logger(), "twist msg publishing");
    this->publisher_->publish(msg);

}



#include <iostream>
#include "TeleopTurtle.h"

int main(int argc, char **argv)
{
    rclcpp::init(argc, argv);

    std::shared_ptr<TeleopTurtle> teleopTurtle = std::make_shared<TeleopTurtle>();
    //rclcpp::spin(teleopTurtle);
    

    for (;;) {
        std::cout<<"input key :";
        char ch;
        std::cin >> ch;

        switch (ch){
        case 'i': case 'I':
            teleopTurtle->forward();
            break;
        case 'm': case 'M':
            teleopTurtle->backward();
            break;
        case 'j': case 'J':
            teleopTurtle->rotateLeft();
            break;
        case 'k': case 'K':
            teleopTurtle->rotateRight();
        }

    }

        rclcpp::shutdown();


    return 0;
}
