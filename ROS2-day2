#include <memory>
#include "MyPublisher.h"

int main(int argc, char ** argv)
{
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<MyPublisher>());
    rclcpp::shutdown();

    return 0;
}



#ifndef My_PUBLISHER_H
#define MY_PUBLISHER_H
#include <memory>
#include <rclcpp/rclcpp.hpp>
#include <std_msgs/msg/string.hpp>

class MyPublisher:public rclcpp::Node {
public:
    MyPublisher();

private:
    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr publisher_;

    rclcpp::TimerBase::SharedPtr timer_;
    int count_;

    void timer_callback();


};

#endif

#include<chrono>
#include<algorithm>
#include <string>
#include "MyPublisher.h"

using namespace std::chrono_literals;

MyPublisher::MyPublisher()
:Node("my_pub"), count_(0)
{
  this->publisher_=this->Node::create_publisher<std_msgs::msg::String>("/my_topic",10);
  this->timer_= this->create_wall_timer(500ms, std::bind(&MyPublisher::timer_callback,this));

}

void MyPublisher::timer_callback()
{
    //std_msgs::msg::String msg();
    auto msg = std_msgs::msg::String();

    msg.data = "hello, world!" + std::to_string(count_++);

    RCLCPP_INFO(this->get_logger(), "Publishing: '%s'", msg.data.c_str());

    this-> publisher_->publish(msg);
}
